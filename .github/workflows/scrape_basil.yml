name: Daily BASIL Scrape and Commit

on:
  # Schedule the workflow to run automatically
  schedule:
    # Runs daily at 03:30 UTC (adjust cron syntax as needed)
    # See: https://crontab.guru/
    - cron: '45 13-18 * * *'

  # Allow manual triggering from the Actions tab in GitHub
  workflow_dispatch:

jobs:
  scrape_and_commit:
    runs-on: ubuntu-latest # Use a Linux runner as the script likely expects it

    # Permissions needed to commit back to the repo
    permissions:
      contents: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          # Use the Python version your script requires
          python-version: '3.10' # Adjust if needed

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      - name: Set up Chrome and ChromeDriver
        # This action downloads Chrome and the matching ChromeDriver
        # and adds them to the PATH environment variable.
        uses: browser-actions/setup-chrome@latest
        # id: setup-chrome # Optional ID if you need to reference the paths later

      - name: Run Scraper Task
        # Directly execute the Python function intended for automation
        # Assumes your main script is 'main.py'
        run: python -c "import main; main.run_automated_task(download=True)"
        env:
           # Ensures Python output is shown in Actions logs immediately
           PYTHONUNBUFFERED: 1
           # Add any other environment variables your script might need

      - name: Commit updated data files
        # Use a dedicated action to automatically commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Automated update: Scrape results for $(date --iso-8601=seconds)"
          # Specify the files to track and commit if changed
          # IMPORTANT: Do NOT add the 'replays/' folder unless you have very few
          # replays, as it will significantly bloat your Git repository!
          file_pattern: "basil_ladder_games.csv daily_scrape.log"
          # Optional: Define committer name and email
          commit_user_name: GitHub Actions Bot
          commit_user_email: actions@github.com
          # Optional: Skip committing if there are no changes
          # skip_dirty_check: false # Default is false, commits only if changes exist